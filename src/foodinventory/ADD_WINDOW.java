/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package foodinventory;
import static foodinventory.Invenotory.inv;
import java.sql.*;
import javax.swing.*;
import java.sql.DriverManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 91912
 */
public class ADD_WINDOW extends javax.swing.JFrame {
Connection con;
DefaultTableModel dm;
    /**
     * Creates new form ADD_WINDOW
     */
    inventorybackend inv;
    public ADD_WINDOW() {
        initComponents();
    }
public ADD_WINDOW(String s){
     initComponents();
     this.setTitle(s);
     try{
          Class.forName("com.mysql.cj.jdbc.Driver");
        String user="root";
        String passwd="aman";
        String url="jdbc:mysql://localhost:3306/sakila";
        
        con=DriverManager.getConnection(url,user,"aman");
      ResultSet rs;
      String cat[]=new String[1000];
      String quantity[]=new String[10000];
      String price[]=new String[1000];
      
      int k=0;
       String q1="select * from "+s;
  PreparedStatement st=con.prepareStatement(q1);

   rs=st.executeQuery();
   k=0;
   while(rs.next())
   {
    cat[k]=rs.getString("Model");
    quantity[k]=rs.getString("Quantity");
    price[k]=rs.getString("Price");
    k++;
       
   }
      for(int i=0;i<k;i++)
                {
                    String set[]={cat[i],quantity[i],price[i]};
                     dm=(DefaultTableModel)ModelTable.getModel();
                    dm.addRow(set);
                }
        
      
     
     }
     catch(Exception e)
     {
         System.out.println(e.getMessage());
     }
     
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ModelTable = new javax.swing.JTable();
        MODEL = new javax.swing.JTextField();
        Quantity = new javax.swing.JTextField();
        Cost = new javax.swing.JTextField();
        ADD = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Pricecb = new javax.swing.JRadioButton();
        Quantitycb = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        price = new javax.swing.JRadioButton();
        Model = new javax.swing.JRadioButton();
        close = new javax.swing.JButton();
        Load = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        ModelTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Model", "Quantity", "Price"
            }
        ));
        ModelTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ModelTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ModelTable);

        MODEL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MODELActionPerformed(evt);
            }
        });

        Cost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CostActionPerformed(evt);
            }
        });

        ADD.setText("ADD");
        ADD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADDActionPerformed(evt);
            }
        });

        update.setText("UPADTE");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        delete.setText("DELETE");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jLabel1.setText("Category");

        jLabel2.setText("Quantity");

        jLabel4.setText("Cost");

        Pricecb.setText("Price");
        Pricecb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PricecbActionPerformed(evt);
            }
        });

        Quantitycb.setText("Quantity");
        Quantitycb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuantitycbActionPerformed(evt);
            }
        });

        jLabel5.setText("SORT");

        jLabel6.setText("FILTERS");

        price.setText("PRICE");
        price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceActionPerformed(evt);
            }
        });

        Model.setText("MODEL");
        Model.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModelActionPerformed(evt);
            }
        });

        close.setText("CLOSE");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });

        Load.setText("LOAD");
        Load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(update, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                            .addComponent(ADD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Quantity, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                                        .addComponent(Cost)
                                        .addComponent(MODEL))
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(Pricecb, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Quantitycb, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE))
                                    .addComponent(price, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(Model, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(Load, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(close, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(close)
                    .addComponent(Load))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MODEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Cost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(ADD)
                        .addGap(18, 18, 18)
                        .addComponent(update)
                        .addGap(18, 18, 18)
                        .addComponent(delete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addGap(1, 1, 1)
                        .addComponent(Pricecb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Quantitycb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(price)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Model)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MODELActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MODELActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MODELActionPerformed

    private void ModelTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ModelTableMouseClicked
        // TODO add your handling code here:
        int c=ModelTable.getSelectedRow();
        if(c>-1)
        {
            DefaultTableModel dm=(DefaultTableModel)ModelTable.getModel();
            String cat=dm.getValueAt(c, 0).toString();
              String quantity=dm.getValueAt(c, 1).toString();
                String price=dm.getValueAt(c, 2).toString();
                MODEL.setText(cat);
                Quantity.setText(quantity);
                Cost.setText(price);
            
            
        }
      
    }//GEN-LAST:event_ModelTableMouseClicked

    private void CostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CostActionPerformed
        // TODO add your handling code here:
       
        
    }//GEN-LAST:event_CostActionPerformed

    private void ADDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADDActionPerformed
        // TODO add your handling code here:
        String cat=MODEL.getText().toString();
         String item=Quantity.getText().toString();
         String price=Cost.getText().toString();
         try{if((!cat.isEmpty())&&(!item.isEmpty())&&(!price.isEmpty()))
         {
             String title=this.getTitle().toString();
             String q1="insert into "+title+"(Model,Quantity,Price) values(?,?,?)";
             PreparedStatement st=con.prepareStatement(q1);
            System.out.println(st);
             st.setString(1,cat);
             st.setString(2,item);
             st.setString(3, price);
             st.executeUpdate();
             JOptionPane.showMessageDialog(this, "Inserted Successfully");
         }
         else 
         {
              JOptionPane.showMessageDialog(this, "Fill the fields");
         }
         dm.setRowCount(0);
         inventorybackend inv=new inventorybackend();
         
         inv.table_update1(this.getTitle().toString());
         System.out.println(inv.k);
         for(int i=0;i<inv.k;i++)
                {
                    String set[]={inv.mod[i],inv.quan[i],inv.price[i]};
                     dm=(DefaultTableModel)ModelTable.getModel();
                    dm.addRow(set);
                }
         int rc=ModelTable.getRowCount();
         String q1="Update categTable set Category=?,Items=? where Category=?";
         PreparedStatement ps=con.prepareStatement(q1);
         ps.setString(1,this.getTitle().toString());
         ps.setString(2,Integer.toString(rc));
         ps.setString(3,this.getTitle().toString());
         ps.executeUpdate();
         }
         catch(Exception e)
         {
             System.out.println(e.getMessage());
         }
        
    }//GEN-LAST:event_ADDActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        dm=(DefaultTableModel)ModelTable.getModel();
int c=ModelTable.getSelectedRow();
 System.out.println(c);
if(c>-1)
{
    System.out.println(c);
    try{
        String q1="delete  from "+this.getTitle().toString()+" where Model=?";
       PreparedStatement st1=con.prepareStatement(q1);
      st1.setString(1,MODEL.getText().toString());
        st1.execute();
        
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
      dm.removeRow(c);
    JOptionPane.showConfirmDialog(this, "Deleted Successfully!!!");
}
else {
  
     JOptionPane.showMessageDialog(this, "Select a row first");
}

    }//GEN-LAST:event_deleteActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        int c=ModelTable.getSelectedRow();
        String upd_model=MODEL.getText().toString();
           String upd_quan=Quantity.getText().toString();
           String upd_price=Cost.getText().toString();
        try{
        if(c>-1&&(!upd_model.isEmpty())&&(!upd_quan.isEmpty())&&(!upd_price.isEmpty()))
        {
            dm=(DefaultTableModel)ModelTable.getModel();
            String s1=dm.getValueAt(c, 0).toString();
            String s2=dm.getValueAt(c, 1).toString();
           String s3=dm.getValueAt(c, 2).toString();
           
           
            dm.setValueAt(upd_model, c, 0);
            dm.setValueAt(upd_quan, c, 1);
             dm.setValueAt(upd_price, c, 2);
            Class.forName("com.mysql.cj.jdbc.Driver");
        String user="root";
        String passwd="aman";
        String url="jdbc:mysql://localhost:3306/sakila";
        String title=this.getTitle().toString();
        String q1="Update "+title+" set Model=?,Quantity=?,Price=? where Model=?";
        
        Connection con=DriverManager.getConnection(url,user,"aman");
   PreparedStatement st=con.prepareStatement(q1);
   st.setString(1,upd_model);
   
   st.setString(2,upd_quan);
   st.setString(3,upd_price);
    st.setString(4,s1);

  
   
   st.executeUpdate();
            JOptionPane.showMessageDialog(this, "Updated the field");
            
           
            
            
        }
        
        else
        {
            System.out.println("Updated");
        }}
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_updateActionPerformed

    private void PricecbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PricecbActionPerformed
        // TODO add your handling code here:
        boolean state=Pricecb.isSelected();
        String title=this.getTitle().toString();
        if(state)
        {
            try{
               Quantitycb.setSelected(false);
            String q1="Select * from "+title+" Order by Price ASC";
            PreparedStatement st=con.prepareStatement(q1);
            ResultSet rs= st.executeQuery();
            dm.setRowCount(0);
            while(rs.next())
            {
                String s1[]={rs.getString("Model"),rs.getString("Quantity"),rs.getString("Price")};
                dm=(DefaultTableModel)ModelTable.getModel();
                dm.addRow(s1);
                
            }}
            catch(Exception e)
            {
                System.out.println(e.getMessage());
            }
            
        }
    }//GEN-LAST:event_PricecbActionPerformed

    private void QuantitycbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuantitycbActionPerformed
        // TODO add your handling code here:
         boolean state=Quantitycb.isSelected();
        String title=this.getTitle().toString();
        if(state)
        {
            try{
               Pricecb.setSelected(false);
                    
            String q1="Select * from "+title+" Order by Quantity ASC";
            PreparedStatement st=con.prepareStatement(q1);
            ResultSet rs= st.executeQuery();
            dm.setRowCount(0);
            while(rs.next())
            {
                String s1[]={rs.getString("Model"),rs.getString("Quantity"),rs.getString("Price")};
                dm=(DefaultTableModel)ModelTable.getModel();
                dm.addRow(s1);
                
            }}
            catch(Exception e)
            {
                System.out.println(e.getMessage());
            }
            
        }
    }//GEN-LAST:event_QuantitycbActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_formMouseClicked

    private void priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceActionPerformed
        // TODO add your handling code here:
        if(price.isSelected())
        {
            Model.setSelected(false);
            try{
                String tite=this.getTitle().toString();
            String q1="Select * from "+tite+" where Price>=?";
            PreparedStatement ps=con.prepareStatement(q1);
           
            ps.setString(1,Cost.getText().toString());
            ResultSet rs=ps.executeQuery();
            DefaultTableModel dm1=(DefaultTableModel)ModelTable.getModel();
dm1.setRowCount(0);
while(rs.next())
{
    String entry[]={rs.getString("Model"),rs.getString("Quantity"),rs.getString("Price")};
    dm1.addRow(entry);
}
            }
            catch(Exception e)
            {
                System.out.println(e.getMessage());
            }
        }
            
        
    }//GEN-LAST:event_priceActionPerformed

    private void ModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModelActionPerformed
        // TODO add your handling code here:
        if(Model.isSelected())
        {
            price.setSelected(false);
            try{
                String tite=this.getTitle().toString();
            String q1="Select * from "+tite+" where Model=?";
            PreparedStatement ps=con.prepareStatement(q1);
           
            ps.setString(1,Model.getText().toString());
            ResultSet rs=ps.executeQuery();
            DefaultTableModel dm1=(DefaultTableModel)ModelTable.getModel();
dm1.setRowCount(0);
while(rs.next())
{
    String entry[]={rs.getString("Model"),rs.getString("Quantity"),rs.getString("Price")};
    dm1.addRow(entry);
}
            }
            catch(Exception e)
            {
                System.out.println(e.getMessage());
            }
        }
        
    }//GEN-LAST:event_ModelActionPerformed

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed

        try{int rc=ModelTable.getRowCount();
        System.out.println(rc);
         String q1="Update categTable set Category=?,Items=? where Category=?";
         PreparedStatement ps=con.prepareStatement(q1);
         ps.setString(1,this.getTitle().toString());
         ps.setString(2,Integer.toString(rc));
         ps.setString(3,this.getTitle().toString());
         ps.executeUpdate();
        this.setVisible(false);}
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_closeActionPerformed

    private void LoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadActionPerformed
 inv=new inventorybackend();
       
       inv.table_update1(this.getTitle().toString());
       System.out.println(inv.k);
       dm.setRowCount(0);
                for(int i=0;i<inv.k;i++)
                {
                    String set[]={inv.mod[i],inv.quan[i],inv.price[i]};
                     dm=(DefaultTableModel)ModelTable.getModel();
                    dm.addRow(set);
                }
        


        // TODO add your handling code here:
    }//GEN-LAST:event_LoadActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ADD_WINDOW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ADD_WINDOW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ADD_WINDOW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ADD_WINDOW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ADD_WINDOW().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ADD;
    private javax.swing.JTextField Cost;
    private javax.swing.JButton Load;
    private javax.swing.JTextField MODEL;
    private javax.swing.JRadioButton Model;
    private javax.swing.JTable ModelTable;
    private javax.swing.JRadioButton Pricecb;
    private javax.swing.JTextField Quantity;
    private javax.swing.JRadioButton Quantitycb;
    private javax.swing.JButton close;
    private javax.swing.JButton delete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JRadioButton price;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
